/*
 * Post process
 *
 * This is a sample server Processing and saving incoming requests
 *
 * API version: 1.0.0
 * Contact: mr.oliver.nadj@gmail.com
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */

package api

import (
	"github.com/prometheus/client_golang/prometheus/promhttp"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

type Route struct {
	Name        string
	Method      string
	Pattern     string
	HandlerFunc http.HandlerFunc
	Monitor     bool
}

type Routes []Route

func NewRouter() *mux.Router {
	router := mux.NewRouter().StrictSlash(true)
	router.NotFoundHandler = http.FileServer(http.Dir("../../web/swaggerui/"))
	summaryVec := BuildSummaryVec("http_response_time_milliseconds", "Latency Percentiles in Milliseconds", "post_proc_api")
	for _, route := range routes {
		var handler http.Handler
		handler = route.HandlerFunc
		handler = Logger(handler, route.Name)
		if route.Monitor {
			handler = WithMonitoring(handler, route, summaryVec)
		}

		router.
			Methods(route.Method).
			Path(route.Pattern).
			Name(route.Name).
			Handler(handler)
	}

	return router
}

func Metrics(w http.ResponseWriter, r *http.Request) {
	p := promhttp.Handler()
	p.ServeHTTP(w, r)
}

func Index(w http.ResponseWriter, r *http.Request) {
	w.Write([]byte("Action API"))
}

var routes = Routes{
	Route{
		"Swagger",
		"GET",
		"/v1/",
		Index,
		true,
	},

	Route{
		"AddAction",
		strings.ToUpper("Post"),
		"/v1/action",
		AddAction,
		true,
	},

	Route{
		"Metrics",
		strings.ToUpper("Get"),
		"/metrics",
		Metrics,
		false,
	},
}
